import { GoogleGenAI, Modality } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || '' });
const illustrationModel = "gemini-2.5-flash-image";

export default async function handler(req: any, res: any) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // V3: This endpoint now receives the final, user-approved prompt.
    // Its only job is to attach the relevant image references and generate the image.
    const { customPrompt, characters, backgrounds, artStyle, aspectRatio } = req.body;

    if (!customPrompt) {
      return res.status(400).json({ error: 'Custom prompt is required' });
    }

    // --- Filtering Logic (using customPrompt for context) ---
    // We still need to filter the master list of references to send only the relevant
    // images along with the prompt.

    const relevantCharacters = (characters || []).filter((char: any) =>
      char.name?.trim() &&
      new RegExp(`\b${char.name.replace(/[-\/\\^$*+?.()|\[\]{}]/g, '\\$&')}\b`, 'i').test(customPrompt)
    );

    const relevantBackgrounds = (backgrounds || []).filter((bg: any) =>
      bg.name?.trim() &&
      new RegExp(`\b${bg.name.replace(/[-\/\\^$*+?.()|\[\]{}]/g, '\\$&')}\b`, 'i').test(customPrompt)
    );

    // --- API Payload Assembly ---
    const parts: any[] = [{ text: customPrompt }];

    if (artStyle) {
      parts.push({ inlineData: { mimeType: artStyle.mimeType, data: artStyle.base64 } });
    }

    relevantBackgrounds.forEach(bg => {
      if (bg.image) {
        parts.push({ inlineData: { mimeType: bg.image.mimeType, data: bg.image.base64 } });
      }
    });

    relevantCharacters.forEach(char => {
      if (char.image) {
        parts.push({ inlineData: { mimeType: char.image.mimeType, data: char.image.base64 } });
      }
    });

    // --- Gemini API Call ---
    const response = await ai.models.generateContent({
      model: illustrationModel,
      contents: { parts },
      config: {
        responseModalities: [Modality.IMAGE],
        ...(aspectRatio && {
          imageConfig: {
            aspectRatio: aspectRatio,
          }
        }),
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return res.status(200).json({
          image: `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`,
          prompt: customPrompt // Return the same prompt that was used
        });
      }
    }

    throw new Error("No image was generated by the API.");

  } catch (error: any) {
    console.error("Error in generate-illustration:", error);
    return res.status(500).json({ error: error.message || 'Failed to generate illustration' });
  }
}
