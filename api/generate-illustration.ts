import { GoogleGenAI, Modality } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || '' });
const illustrationModel = "gemini-2.5-flash-image";

export default async function handler(req: any, res: any) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { sceneDescription, characters, backgrounds, artStyle, shotType } = req.body;

  if (!sceneDescription) {
    return res.status(400).json({ error: 'Scene description is required' });
  }

  try {
    // Find which characters are actually mentioned in this specific scene
    const relevantCharacters = (characters || []).filter((char: any) =>
      char.name.trim() &&
      new RegExp(`\\b${char.name.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')}\\b`, 'i').test(sceneDescription)
    );

    const parts: any[] = [];

    const shotTypeInstruction = shotType && shotType !== 'automatic'
      ? `Composition: Use a **${shotType.replace(/_/g, ' ')}** for this scene.`
      : '';

    parts.push(
      { text: `Your task is to create a single, cohesive illustration for the following scene description. You will be given reference images for art style, background(s), and potentially specific characters if they are mentioned in the scene.

${shotTypeInstruction}

Scene Description: "${sceneDescription}"

**CRITICAL INSTRUCTIONS:**
1.  **Art Style:** The final image must strictly adhere to the provided art style reference. This style dictates the overall look and feel, including line work, coloring, and texture.
2.  **Background:** The setting should be inspired by the background reference image(s). If multiple are provided, blend their elements to create a cohesive environment that fits the scene description.
3.  **Character Consistency (HIGHEST PRIORITY):**
    *   **Analyze and Replicate:** Before drawing, mentally list the key visual traits of any character reference provided (e.g., "spiky blonde hair, green eyes, red jacket, scar over left eye"). Your final drawing **MUST** replicate these features with **extreme accuracy**.
    *   **Mentioned Characters Only:** Only draw characters who are explicitly mentioned in the scene description. Reference images are provided for these characters.
    *   **High-Fidelity Match:** If a character is mentioned, their appearance in your illustration (facial structure, hair style and color, eye color, clothing, and any defining marks) **must be a perfect match** to their reference image. Consistency is paramount.
    *   **Redraw, Don't Copy:** **DO NOT** simply copy and paste the character from the reference. You must **REDRAW** the character from scratch in a new pose, with an expression that fits the scene's action and mood, while maintaining their core visual identity from the reference.
    *   **No Unmentioned Characters:** If no characters are mentioned in the scene description, **DO NOT add any people** to the illustration. Focus solely on the described environment and mood.
`
      }
    );

    if (artStyle) {
      parts.push({ text: "This is the reference for the overall ART STYLE:" });
      parts.push({ inlineData: { mimeType: artStyle.mimeType, data: artStyle.base64 } });
    }

    if (backgrounds && backgrounds.length > 0) {
      backgrounds.forEach((bg: any, index: number) => {
        const label = backgrounds.length > 1
          ? `This is reference ${index + 1} for the BACKGROUND/SETTING:`
          : "This is the reference for the BACKGROUND/SETTING:";
        parts.push({ text: label });
        parts.push({ inlineData: { mimeType: bg.image.mimeType, data: bg.image.base64 } });
      });
    }

    relevantCharacters.forEach((char: any) => {
      if (char.image) {
        parts.push({ text: `This is the HIGH-PRIORITY reference for the character named "${char.name}". Replicate their appearance with extreme accuracy as instructed.` });
        parts.push({ inlineData: { mimeType: char.image.mimeType, data: char.image.base64 } });
      }
    });

    const response = await ai.models.generateContent({
      model: illustrationModel,
      contents: { parts },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return res.status(200).json({
          image: `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`
        });
      }
    }

    throw new Error("No image was generated by the API.");

  } catch (error: any) {
    console.error("Error generating illustration:", error);
    return res.status(500).json({ error: error.message || 'Failed to generate illustration' });
  }
}
